x-kong-config: &kong-env
  KONG_DATABASE: postgres
  KONG_PG_HOST: ogna-database
  KONG_PG_DATABASE: ${POSTGRES_DB}
  KONG_PG_USER: ${POSTGRES_USER}
  KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}

services:
  kong-bootstrap:
    image: kong/kong-gateway:3.12.0.0
    container_name: kong-bootstrap
    networks:
      - ogna
    depends_on:
      ogna-database:
        condition: service_healthy
    restart: on-failure
    environment:
      <<: *kong-env
    command: kong migrations bootstrap # Run DB migrations to initialize Kong schema

  kong-cp:
    image: kong/kong-gateway:3.12.0.0
    container_name: kong-cp
    restart: unless-stopped
    user: root # Run as root to ensure certificate read permissions
    networks:
      - ogna
    environment:
      <<: *kong-env
      KONG_PLUGINS: bundled,acme,cors
      KONG_LUA_SSL_TRUSTED_CERTIFICATE: system
      KONG_NGINX_HTTP_LUA_SHARED_DICT: acme_storage 10m
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      # SSL Certificate paths
      KONG_SSL_CERT: /certs/live/${DOMAIN}/fullchain.pem
      KONG_SSL_CERT_KEY: /certs/live/${DOMAIN}/privkey.pem
      # Security headers
      KONG_HEADERS: "off"
      KONG_SERVER_TOKENS: "off"
      # Performance tuning
      KONG_NGINX_WORKER_PROCESSES: ${KONG_WORKER_PROCESSES:-auto}
      KONG_NGINX_WORKER_CONNECTIONS: ${KONG_WORKER_CONNECTIONS:-4096}
      # Logging
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_LOG_LEVEL: ${KONG_LOG_LEVEL:-notice}
    depends_on:
      kong-bootstrap:
        condition: service_completed_successfully
      ogna-database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    ports:
      - "80:8000"
      - "443:8443"
    volumes:
      - ./config/kong.yaml:/kong/kong.yaml:ro
      - ./acme:/usr/local/kong/acme
      - ./letsencrypt:/certs:ro
      - ./logs:/var/log/kong
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        # Wait for certificates to be ready
        echo "Waiting for certificates..."
        while [ ! -f /certs/.ready ]; do
          sleep 2
        done

        # Verify certificates exist
        if [ ! -f "/certs/live/$DOMAIN/fullchain.pem" ] || [ ! -f "/certs/live/$DOMAIN/privkey.pem" ]; then
          echo "ERROR: Certificate files not found!"
          exit 1
        fi

        echo "Certificates found, starting Kong..."
        exec /docker-entrypoint.sh kong docker-start
    env_file:
      - .env

  ogna-database:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - ogna
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-ogna_user} -d ${POSTGRES_DB:-ogna_db}",
        ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    env_file:
      - .env

  deck-sync:
    image: kong/deck:latest
    depends_on:
      kong-cp:
        condition: service_healthy
    networks:
      - ogna
    volumes:
      - ./config:/kong-extra
    command:
      [
        "gateway",
        "sync",
        "--kong-addr",
        "http://kong-cp:8001",
        "/kong-extra/kong.yaml",
      ]

  certbot:
    build:
      context: ./certbot
      dockerfile: Dockerfile
    container_name: certbot
    volumes:
      - ./letsencrypt:/etc/letsencrypt
      - ./certbot-logs:/var/log/letsencrypt
      - ./scripts:/scripts
    entrypoint: /bin/sh
    command:
      - -c
      - |
        # Check if certificate already exists
        if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
          echo "Certificate already exists, checking if renewal needed..."
          certbot renew \
            --authenticator dns-hetzner \
            --dns-hetzner-credentials /scripts/hetzner.ini \
            --deploy-hook "touch /etc/letsencrypt/renewed"
        else
          echo "Obtaining new certificate..."
          certbot certonly \
            --authenticator dns-hetzner \
            --dns-hetzner-credentials /scripts/hetzner.ini \
            -d "*.$DOMAIN" \
            --email "$EMAIL" \
            --agree-tos \
            --non-interactive
        fi

        # Signal that certificates are ready
        touch /etc/letsencrypt/.ready

        echo "Certbot initial run complete. Sleeping..."
        # Keep container running for renewals
        while true; do
          sleep 12h
          certbot renew \
            --authenticator dns-hetzner \
            --dns-hetzner-credentials /scripts/hetzner.ini \
            --deploy-hook "touch /etc/letsencrypt/renewed"
        done
    networks:
      - ogna
    restart: unless-stopped
    env_file:
      - .env

  cert-watcher:
    image: alpine:latest
    container_name: cert-watcher
    volumes:
      - ./letsencrypt:/certs:ro
    entrypoint: /bin/sh
    command:
      - -c
      - |
        apk add --no-cache inotify-tools curl
        echo 'Waiting for Kong to be ready...'
        until curl -s http://kong-cp:8001/status > /dev/null 2>&1; do
          sleep 2
        done
        echo 'Watching for certificate renewals...'
        while true; do
          inotifywait -e create,modify /certs/renewed 2>/dev/null && \
          echo 'Certificate renewed, reloading Kong...' && \
          curl -s -X POST http://kong-cp:8001/config?check_hash=1 > /dev/null && \
          echo 'Kong reloaded successfully' && \
          rm -f /certs/renewed
        done
    networks:
      - ogna
    depends_on:
      kong-cp:
        condition: service_healthy
    restart: unless-stopped
    env_file:
      - .env

volumes:
  postgres_data:
    driver: local

networks:
  ogna:
    name: ogna
    driver: bridge
